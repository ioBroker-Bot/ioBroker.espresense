{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport type { LibraryStateVal } from './lib/library.js';\n// eslint-disable-next-line\nimport { Library, sleep } from './lib/library.js';\nimport { MQTTClientClass, MQTTServerClass } from './lib/mqtt.js';\nimport { genericStateObjects, statesObjects } from './lib/definition.js';\nimport 'source-map-support/register';\nimport { trilaterate4 } from './lib/tools.js';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nexport class Espresense extends utils.Adapter {\n    library: Library;\n    unload: boolean = false;\n    mqttClient: MQTTClientClass | undefined;\n    mqttServer: MQTTServerClass | undefined;\n    namedDevices: { [key: string]: string } = {};\n    timeout: ioBroker.Timeout | undefined = undefined;\n    startDelay: ioBroker.Timeout | undefined = undefined;\n    unseenCheckTime: number = 5000;\n    deviceDB: { [id: string]: { name: string; lc: number } } = {};\n    delayedMessages: { [key: string]: any } = {};\n    roomDB: { [key: string]: [number, number, number] | undefined } = {};\n    calculateDelayTimeout: { [key: string]: ioBroker.Timeout | undefined } = {};\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'espresense',\n        });\n        this.library = new Library(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator during startup\n        await this.setState('info.connection', false, true);\n        await this.library.init();\n        this.log.info(`Starting ${this.name} adapter v${this.version}`);\n        await this.library.initStates(await this.getStatesAsync('*'));\n        this.library.defaults.updateStateOnChangeOnly = false;\n\n        await this.library.writedp('devices', undefined, genericStateObjects.devices);\n        await this.library.writedp('rooms', undefined, genericStateObjects.rooms);\n        await this.library.writedp('settings', undefined, genericStateObjects.settings);\n        await this.library.writedp('global', undefined, genericStateObjects.global);\n        for (const id in statesObjects.rooms) {\n            //@ts-expect-error id is keyof\n            const obj = statesObjects.rooms[id];\n            if (obj && obj.common && obj.common.write === true && id !== 'max_distance_ioBroker') {\n                const val = this.library.readdb(`global.${id}`);\n                if (val == undefined) {\n                    const val: any =\n                        obj.common.type == 'string'\n                            ? ''\n                            : obj.common.type == 'number'\n                              ? -1\n                              : obj.common.type == 'boolean'\n                                ? false\n                                : null;\n                    await this.library.writedp(`global.${id}`, val, obj, false);\n                }\n            }\n        }\n        const temp = this.library.readdb('deviceDB');\n        if (temp && temp.val && typeof temp.val == 'string') {\n            this.deviceDB = JSON.parse(temp.val);\n        }\n        await this.subscribeStatesAsync('devices.*');\n        await this.subscribeStatesAsync('rooms.*');\n        await this.subscribeStatesAsync('global.*');\n        this.namedDevices = {};\n        //check config\n        let testIt: any = this.config.MQTTServerIp;\n        if ((testIt == '' || typeof testIt != 'string') && !this.config.MQTTUseServer) {\n            this.log.error(`Invalid configuration mqtt server ip has unexpeted value: ${testIt}`);\n            return;\n        }\n        testIt = this.config.MQTTServerPort;\n        if (typeof testIt != 'number' || testIt <= 1023) {\n            this.log.error(`Invalid configuration mqtt server port has unexpeted value: ${testIt}`);\n            return;\n        }\n        testIt = this.config.MQTTPassword;\n        if (typeof testIt != 'string') {\n            this.log.error(`Invalid configuration mqtt server password has unexpeted value type ${typeof testIt}`);\n            return;\n        }\n        testIt = this.config.MQTTHandleInterval;\n        if (typeof testIt != 'number') {\n            this.log.error(`Invalid configuration mqtt handle interval has unexpeted value type ${typeof testIt}`);\n            return;\n        }\n\n        this.config.MQTTHandleInterval *= 1000;\n        if (this.config.MQTTHandleInterval > 2 ** 32 / 2 - 1) {\n            this.config.MQTTHandleInterval = 2 ** 32 / 2 - 1;\n        }\n\n        testIt = this.config.MQTTUsername;\n        if (typeof testIt != 'string') {\n            this.log.error(`Invalid configuration mqtt username has unexpeted value typ: ${typeof testIt}`);\n            return;\n        }\n        testIt = this.config.unseenTime;\n        if (isNaN(testIt) || testIt == '' || testIt < 5) {\n            this.config.unseenTime = 20;\n        }\n        testIt = this.config.selectedDevices;\n        if (typeof testIt != 'object' || !Array.isArray(testIt)) {\n            this.config.selectedDevices = [];\n        } else {\n            const oldConfig = JSON.stringify(this.config.selectedDevices);\n            this.config.selectedDevices = this.config.selectedDevices.filter(a => {\n                return typeof a.id == 'string' && a.id != '';\n            });\n            if (oldConfig != JSON.stringify(this.config.selectedDevices)) {\n                const obj = await this.getForeignObjectAsync(`system.adapter.${this.name}.${this.instance}`);\n                if (obj && obj.native) {\n                    obj.native.selectedDevices = this.config.selectedDevices;\n                    await this.setForeignObjectAsync(`system.adapter.${this.name}.${this.instance}`, obj);\n                    this.log.warn('Fixed configuration for selected devices! ');\n                }\n            }\n        }\n        this.config.unseenTime *= 1000;\n        // configuration ok\n        // refresh states\n        if ((this.config.selectedDevices || []).length > 0) {\n            await this.library.cleanUpTree(\n                this.config.selectedDevices.map(a => `devices.${this.library.cleandp(a.id, false, true)}`),\n                [`devices.`],\n                -1,\n            );\n        }\n        await this.library.initStates(await this.getStatesAsync('*'));\n\n        const rooms = this.library.getStates('rooms.*.positionsArray');\n        for (const id in rooms) {\n            const data = rooms[id];\n            if (data && data.val && typeof data.val == 'string') {\n                try {\n                    this.roomDB[id.split('.')[1]] = JSON.parse(data.val);\n                } catch (e: any) {\n                    this.log.error(e);\n                    this.log.error(`Not a array in Room: ${id} data: ${data.val}`);\n                }\n            }\n        }\n        this.log.debug(`Rooms: ${JSON.stringify(rooms)}`);\n\n        if (this.config.MQTTUseServer) {\n            this.mqttServer = new MQTTServerClass(\n                this,\n                this.config.MQTTServerPort,\n                this.config.MQTTUsername,\n                this.config.MQTTPassword,\n                utils.getAbsoluteInstanceDataDir(this),\n            );\n        }\n        await this.delay(200);\n        this.mqttClient = new MQTTClientClass(\n            this,\n            this.config.MQTTUseServer ? '127.0.0.1' : this.config.MQTTServerIp,\n            this.config.MQTTServerPort,\n            this.config.MQTTUsername,\n            this.config.MQTTPassword,\n        );\n\n        if (!this.config.retainGlobal) {\n            for (const id in statesObjects.rooms) {\n                const topic = `espresense/rooms/*/${id}/set`;\n                if (this.mqttClient) {\n                    await this.mqttClient.publish(topic, '', { retain: true });\n                }\n            }\n        }\n        this.doDelayedMessage();\n    }\n\n    private doDelayedMessage(): void {\n        this.timeout = this.setTimeout(async () => {\n            if (this.unload) {\n                return;\n            }\n\n            for (const dp in this.delayedMessages) {\n                const cmd = this.delayedMessages[dp];\n                if (cmd !== undefined) {\n                    this.delayedMessages[dp] = undefined;\n                    await this.handleMessage(dp, cmd, false);\n                }\n            }\n            this.delayedMessages = Object.fromEntries(\n                Object.entries(this.delayedMessages).filter(([_, v]) => v != undefined),\n            );\n            await sleep(100);\n            await this.library.garbageColleting('devices.', this.config.unseenTime);\n            this.doDelayedMessage();\n        }, this.config.MQTTHandleInterval);\n    }\n    async handleMessage(topic: string, message: any, delayed: boolean = true): Promise<void> {\n        if (!topic || message == undefined) {\n            return;\n        }\n        if (delayed && this.config.MQTTHandleInterval > 0) {\n            this.delayedMessages[topic] = message;\n            return;\n        }\n        this.log.debug(\n            `${topic}: ${typeof message} - ${typeof message == 'object' ? JSON.stringify(message) : message}`,\n        );\n\n        const parts = topic.split('/');\n        parts.shift();\n        if (parts[0] !== 'rooms' && parts[0] !== 'settings' && parts[0] !== 'devices') {\n            return;\n        }\n        const typ: 'settings' | 'devices' | 'rooms' = parts[0];\n        parts.shift();\n        const temp = this.library.cloneGenericObject(statesObjects[typ]._channel) as ioBroker.DeviceObject;\n\n        let device = parts.shift();\n        device = device ? device : 'no_name';\n        if (message && message.name && message.id) {\n            this.namedDevices[message.id] = message.name;\n        }\n\n        temp.common.name = this.namedDevices[device] || device;\n\n        if (typ === 'settings' && message.name) {\n            temp.common.name = message.name;\n        }\n        if (typ === 'devices') {\n            const index = (this.config.selectedDevices || []).findIndex(i => i.id === device);\n\n            this.namedDevices[message.id] =\n                index != -1 ? this.config.selectedDevices[index].name : this.namedDevices[message.id];\n            temp.common.name = this.namedDevices[message.id];\n            this.deviceDB[device] = { name: this.namedDevices[device] || device, lc: Date.now() };\n            this.library\n                .writedp('deviceDB', JSON.stringify(this.deviceDB), genericStateObjects.deviceDB)\n                .catch(() => {});\n            if (this.config.selectedDevices.length > 0) {\n                if (index == -1) {\n                    return;\n                }\n            }\n        }\n        device = this.library.cleandp(device, false, true);\n        if (typ !== 'rooms' && device != '*') {\n            await this.library.writedp(`${typ}.${device}`, undefined, {\n                ...temp,\n                type: 'device',\n                common: {\n                    ...temp.common,\n                    statusStates: {\n                        onlineId: 'presense',\n                    },\n                },\n            });\n        }\n\n        switch (typ) {\n            case 'rooms':\n                {\n                    // ignore set commands\n                    let path = `${typ}.${device}`;\n                    if (device == '*') {\n                        path = 'global';\n                        if (parts[parts.length - 1] == 'set') {\n                            parts.pop();\n                        }\n                    } else if (parts[parts.length - 1] == 'set') {\n                        return;\n                    } else {\n                        await this.library.writedp(\n                            `${typ}.${device}.max_distance_ioBroker`,\n                            undefined,\n                            statesObjects.rooms.max_distance_ioBroker,\n                        );\n                        await this.library.writedp(\n                            `${typ}.${device}.positionsArray`,\n                            undefined,\n                            statesObjects.rooms.positionsArray,\n                        );\n                        await this.library.writedp(`${typ}.${device}`, undefined, temp);\n                    }\n\n                    const data: any = {};\n                    const t = parts.join('.');\n                    data[t] = message;\n                    try {\n                        data.restart = false;\n                        await this.library.writeFromJson(path, typ, statesObjects, data);\n                    } catch (e: any) {\n                        this.log.error(e);\n                        this.log.error(`Topic:${topic} data: ${JSON.stringify(data)}`);\n                    }\n                }\n                break;\n\n            case 'settings':\n                {\n                    const data: any = {};\n                    this.namedDevices[message.id] = message.name;\n\n                    data[parts.join('.')] = message;\n                    await this.library.writeFromJson(`${typ}.${device}`, typ, statesObjects, data);\n                    await this.library.writedp(\n                        `${typ}.${device}.max_distance_ioBroker`,\n                        undefined,\n                        statesObjects.rooms.max_distance_ioBroker,\n                    );\n                }\n                break;\n\n            case 'devices': {\n                if (this.calculateDelayTimeout[device] !== undefined) {\n                    this.clearTimeout(this.calculateDelayTimeout[device]);\n                }\n\n                let subDevice = parts.shift();\n                subDevice = subDevice ? subDevice : 'no_name';\n                subDevice = this.library.cleandp(subDevice, false, true);\n                const temp = this.library.cloneGenericObject(statesObjects[typ]._channel) as ioBroker.DeviceObject;\n                temp.common.name = this.namedDevices[`node:${subDevice}`] || subDevice;\n                message.friendlyRoomName = this.namedDevices[`node:${subDevice}`] || 'Error: Report to developer';\n                const tempObj: LibraryStateVal = this.library.readdb(`${typ}.${device}.${subDevice}.convertFactor`);\n                const max_distance_ioBroker: LibraryStateVal = this.library.readdb(\n                    `rooms.${subDevice}.max_distance_ioBroker`,\n                );\n                message.convertFactor = 100;\n                message.convert = 0;\n                if (tempObj !== undefined && tempObj !== null) {\n                    message.convertFactor = tempObj.val;\n                }\n                message.distanceConverted = (message.distance * message.convertFactor) / 100;\n\n                // if max_distance_ioBroker is set, use it to determine presence otherwise use default.\n                if (\n                    max_distance_ioBroker !== undefined &&\n                    max_distance_ioBroker !== null &&\n                    max_distance_ioBroker.val !== undefined &&\n                    max_distance_ioBroker.val !== null &&\n                    max_distance_ioBroker.val !== -1\n                ) {\n                    await this.library.writedp(\n                        `${typ}.${device}.${subDevice}.presense`,\n                        max_distance_ioBroker.val >= message.distanceConverted,\n                        genericStateObjects.presense,\n                    );\n                    if (max_distance_ioBroker.val >= message.distanceConverted) {\n                        await this.library.writedp(`${typ}.${device}.presense`, true, genericStateObjects.presense);\n                    }\n                } else {\n                    await this.library.writedp(\n                        `${typ}.${device}.${subDevice}.presense`,\n                        true,\n                        genericStateObjects.presense,\n                    );\n                    await this.library.writedp(`${typ}.${device}.presense`, true, genericStateObjects.presense);\n                }\n                await this.library.writedp(`${typ}.${device}.${subDevice}`, undefined, {\n                    ...temp,\n                    common: {\n                        ...temp.common,\n                        statusStates: {\n                            onlineId: 'presense',\n                        },\n                    },\n                });\n                await this.library.writeFromJson(`${typ}.${device}.${subDevice}`, typ, statesObjects, message);\n                this.calculateDelayTimeout[device] = this.setTimeout(\n                    async _device => {\n                        const roomsToUse = Object.keys(this.roomDB)\n                            .filter(a => {\n                                const data = this.roomDB[a];\n                                if (data && typeof data === 'object' && Array.isArray(data)) {\n                                    return true;\n                                }\n                                return false;\n                            })\n                            .map(a => {\n                                return {\n                                    name: a,\n                                    pos: this.roomDB[a]!,\n                                    distance: (this.library.readdb(`devices.${_device}.${a}.distanceConverted`) || {})\n                                        .val,\n                                    presense: !!(this.library.readdb(`devices.${_device}.${a}.presense`) || {}).val,\n                                };\n                            })\n                            .filter(a => a.presense && typeof a.distance === 'number' && a.pos && Array.isArray(a.pos));\n                        if (roomsToUse.length < 4) {\n                            return;\n                        }\n\n                        roomsToUse.sort((a, b) => {\n                            if (a.distance! < b.distance!) {\n                                return -1;\n                            } else if (a.distance! > b.distance!) {\n                                return 1;\n                            }\n                            return 0;\n                        });\n                        const rooms = roomsToUse.slice(0, 4);\n\n                        const result = trilaterate4(\n                            rooms[0].pos,\n                            rooms[0].distance as number,\n                            rooms[1].pos,\n                            rooms[1].distance as number,\n                            rooms[2].pos,\n                            rooms[2].distance as number,\n                            rooms[3].pos,\n                            rooms[3].distance as number,\n                        );\n                        const position = result.position;\n                        if (position) {\n                            position[0] = Math.round(position[0] * 100) / 100;\n                            position[1] = Math.round(position[1] * 100) / 100;\n                            position[2] = Math.round(position[2] * 100) / 100;\n                        }\n                        this.log.debug(`Position: ${JSON.stringify(position)}`);\n                        await this.library.writedp(\n                            `devices.${_device}.position`,\n                            JSON.stringify(position),\n                            genericStateObjects.position,\n                        );\n                        await this.library.writedp(\n                            `devices.${_device}.positionQuality`,\n                            result.zSquared,\n                            genericStateObjects.positionQuality,\n                        );\n                    },\n                    150,\n                    device,\n                );\n            }\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.unload = true;\n            if (this.mqttClient) {\n                this.mqttClient.destroy();\n            }\n            if (this.mqttServer) {\n                this.mqttServer.destroy();\n            }\n            if (this.timeout) {\n                this.clearTimeout(this.timeout);\n            }\n            if (this.startDelay) {\n                this.clearTimeout(this.startDelay);\n            }\n            this.library.delete();\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id\n     * @param state\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state && !state.ack) {\n            id = id.replace(`${this.namespace}.`, '');\n            const dbEntry = this.library.readdb(id);\n            if (dbEntry && dbEntry.obj && dbEntry.obj.common && dbEntry.obj.common.write) {\n                const native = dbEntry.obj.native;\n                let val = state.val;\n                if (native && native.convert) {\n                    const fn = new Function('val', `return ${native.convert}`);\n                    val = fn(val);\n                }\n                if (id.endsWith('.convert') && id.startsWith('devices.')) {\n                    const dist = this.library.readdb(`${id.substring(0, id.lastIndexOf('.'))}.distance`);\n                    if (\n                        dist &&\n                        val !== undefined &&\n                        val !== null &&\n                        dist.val !== undefined &&\n                        dist.val !== null &&\n                        !isNaN(val as number) &&\n                        !isNaN(dist.val as number)\n                    ) {\n                        val = (val as number) / (dist.val as number); // (convO.val as number);\n                        await this.library.writedp(id, 0, statesObjects.devices.convert, true);\n                        await this.library.writedp(\n                            `${id.substring(0, id.lastIndexOf('.'))}.convertFactor`,\n                            val * 100,\n                            statesObjects.devices.convertFactor,\n                            true,\n                        );\n                        await this.library.writedp(\n                            `${id.substring(0, id.lastIndexOf('.'))}.distanceConverted`,\n                            val * (dist.val as number),\n                            statesObjects.devices.distanceConverted,\n                            true,\n                        );\n                    }\n                } else if (id.endsWith('.distanceIoBroker') && id.startsWith('rooms.')) {\n                    await this.library.writedp(id, state.val, statesObjects.rooms.max_distance_ioBroker, true);\n                } else if (id.endsWith('.positionsArray') && id.startsWith('rooms.')) {\n                    const data = state.val;\n                    if (typeof data == 'string') {\n                        try {\n                            this.roomDB[id.split('.')[1]] = JSON.parse(data);\n                            await this.library.writedp(id, state.val, undefined, true);\n                        } catch (e: any) {\n                            this.log.error(e);\n                            this.log.error(`Not a array in Room: ${id} data: ${data}`);\n                        }\n                    }\n                } else {\n                    this.library.setdb(id, 'state', state.val, undefined, state.ack, state.ts);\n                    const global = id.split('.')[0] === 'global';\n                    const topic = global\n                        ? `espresense/rooms/*/${id.split('.')[1]}/set`\n                        : `espresense/${id.split('.').join('/')}/set`;\n                    if (this.mqttClient) {\n                        await this.mqttClient.publish(topic, String(val), {\n                            retain: id.endsWith('.restart') ? false : !!this.config.retainGlobal,\n                        });\n                        await this.library.writedp(id, state.val, undefined, true);\n                    }\n                }\n            } else {\n                this.library.setdb(id, 'state', state.val, undefined, state.ack, state.ts);\n            }\n        }\n    }\n\n    //If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     *\n     * @param obj\n     */\n    private onMessage(obj: ioBroker.Message): void {\n        if (typeof obj === 'object' && obj.message) {\n            this.log.debug(`Message: ${JSON.stringify(obj)}`);\n            switch (obj.command) {\n                case 'getDevices':\n                    {\n                        let result: { label: string; value: string }[] = [];\n                        for (const device of this.config.selectedDevices) {\n                            result.push({\n                                label: device.name,\n                                value: device.id,\n                            });\n                        }\n                        for (const id in this.deviceDB) {\n                            const data = this.deviceDB[id];\n                            if (data.lc < Date.now() - 300000) {\n                                delete this.deviceDB[id];\n                                continue;\n                            } else {\n                                if (id == '') {\n                                    continue;\n                                }\n                                if (data.name == '') {\n                                    data.name = id;\n                                }\n                                result.push({ label: data.name, value: id });\n                            }\n                        }\n                        result = result.filter(\n                            (a, b) =>\n                                result.findIndex(c => {\n                                    return c.value == a.value;\n                                }) == b,\n                        );\n                        this.library\n                            .writedp('deviceDB', JSON.stringify(this.deviceDB), genericStateObjects.deviceDB)\n                            .catch(() => {});\n                        if (obj.callback) {\n                            this.log.info(result ? JSON.stringify(result) : 'invalid result');\n                            this.sendTo(obj.from, obj.command, result ?? [], obj.callback);\n                        }\n                    }\n                    break;\n                case 'addDevice':\n                    {\n                        if (\n                            this.config.selectedDevices.findIndex(i => {\n                                return i.id == obj.message.id;\n                            }) == -1\n                        ) {\n                            this.config.selectedDevices.push({\n                                id: obj.message.id,\n                                name:\n                                    (this.deviceDB[obj.message.id] && this.deviceDB[obj.message.id].name) ||\n                                    obj.message.id,\n                            });\n                        }\n                        if (obj.callback) {\n                            this.sendTo(\n                                obj.from,\n                                obj.command,\n                                { native: { selectedDevices: this.config.selectedDevices } },\n                                obj.callback,\n                            );\n                        }\n                    }\n                    break;\n                case 'removeDevice':\n                    {\n                        if (this.config.selectedDevices.findIndex(i => i.id == obj.message.id) != -1) {\n                            this.config.selectedDevices.splice(\n                                this.config.selectedDevices.findIndex(i => i.id == obj.message.id),\n                                1,\n                            );\n                        }\n                        if (obj.callback) {\n                            this.sendTo(\n                                obj.from,\n                                obj.command,\n                                { native: { selectedDevices: this.config.selectedDevices } },\n                                obj.callback,\n                            );\n                        }\n                    }\n                    break;\n            }\n            if (obj.command === 'send') {\n                // e.g. send email or pushover or whatever\n                this.log.info('send command');\n\n                // Send response in callback if required\n                if (obj.callback) {\n                    this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n                }\n            }\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Espresense(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Espresense())();\n}\n"],
  "mappings": "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",
  "names": ["val", "temp"]
}
