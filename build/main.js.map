{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Library } from './lib/library.js';\nimport { MQTTClientClass, MQTTServerClass } from './lib/mqtt.js';\nimport { genericStateObjects, statesObjects } from './lib/definition.js';\nimport 'source-map-support/register';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nexport class Espresense extends utils.Adapter {\n    library: Library;\n    mqttClient: MQTTClientClass | undefined;\n    mqttServer: MQTTServerClass | undefined;\n    namedDevices: { [key: string]: string } = {};\n    timeout: ioBroker.Interval | undefined = undefined;\n    startDelay: ioBroker.Timeout | undefined = undefined;\n    unseenCheckTime: number = 5000;\n    deviceDB: { [id: string]: { name: string; lc: number } } = {};\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'espresense',\n        });\n        this.library = new Library(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator during startup\n        this.setStateAsync('info.connection', false, true);\n        this.startDelay = this.setTimeout(async () => {\n            await this.library.init();\n            await this.library.initStates(await this.getStatesAsync('*'));\n            this.library.defaults.updateStateOnChangeOnly = false;\n\n            await this.library.writedp('devices', undefined, genericStateObjects.devices);\n            await this.library.writedp('rooms', undefined, genericStateObjects.rooms);\n            await this.library.writedp('settings', undefined, genericStateObjects.settings);\n            await this.library.writedp('global', undefined, genericStateObjects.global);\n            for (const id in statesObjects.rooms) {\n                //@ts-expect-error id is keyof\n                const obj = statesObjects.rooms[id];\n                if (obj && obj.common && obj.common.write === true) {\n                    const val = this.library.readdb(`global.${id}`);\n                    if (val == undefined) {\n                        const val: any =\n                            obj.common.type == 'string'\n                                ? ''\n                                : obj.common.type == 'number'\n                                  ? -1\n                                  : obj.common.type == 'boolean'\n                                    ? false\n                                    : null;\n                        await this.library.writedp(`global.${id}`, val, obj, false);\n                    }\n                }\n            }\n            const temp = this.library.readdb('deviceDB');\n            if (temp && temp.val && typeof temp.val == 'string') {\n                this.deviceDB = JSON.parse(temp.val);\n            }\n\n            await this.subscribeStatesAsync('rooms.*');\n            await this.subscribeStatesAsync('global.*');\n            this.namedDevices = {};\n            //check config\n            let testIt: any = this.config.MQTTServerIp;\n            if ((testIt == '' || typeof testIt != 'string') && !this.config.MQTTUseServer) {\n                this.log.error(`Invalid configuration mqtt server ip has unexpeted value: ${testIt}`);\n                return;\n            }\n            testIt = this.config.MQTTServerPort;\n            if (typeof testIt != 'number' || testIt <= 1023) {\n                this.log.error(`Invalid configuration mqtt server port has unexpeted value: ${testIt}`);\n                return;\n            }\n            testIt = this.config.MQTTPassword;\n            if (typeof testIt != 'string') {\n                this.log.error(`Invalid configuration mqtt server password has unexpeted value type ${typeof testIt}`);\n                return;\n            }\n            testIt = this.config.MQTTUsername;\n            if (typeof testIt != 'string') {\n                this.log.error(`Invalid configuration mqtt username has unexpeted value typ: ${typeof testIt}`);\n                return;\n            }\n            testIt = this.config.unseenTime;\n            if (isNaN(testIt) || testIt == '' || testIt < 5) {\n                this.config.unseenTime = 20;\n            }\n            testIt = this.config.selectedDevices;\n            if (typeof testIt != 'object' || !Array.isArray(testIt)) {\n                this.config.selectedDevices = [];\n            } else {\n                const oldConfig = JSON.stringify(this.config.selectedDevices);\n                this.config.selectedDevices = this.config.selectedDevices.filter((a) => {\n                    return typeof a.id == 'string' && a.id != '';\n                });\n                if (oldConfig != JSON.stringify(this.config.selectedDevices)) {\n                    const obj = await this.getForeignObjectAsync(`system.adapter.${this.name}.${this.instance}`);\n                    if (obj && obj.native) {\n                        obj.native.selectedDevices = this.config.selectedDevices;\n                        await this.setForeignObjectAsync(`system.adapter.${this.name}.${this.instance}`, obj);\n                        this.log.warn('Fixed configuration for selected devices! ');\n                    }\n                }\n            }\n            this.config.unseenTime *= 1000;\n            // configuration ok\n            // refresh states\n            if ((this.config.selectedDevices || []).length > 0) {\n                await this.library.cleanUpTree(\n                    this.config.selectedDevices.map((a) => `devices.${this.library.cleandp(a.id, false, true)}`),\n                    [`devices.`],\n                    -1,\n                );\n            }\n            await this.library.initStates(await this.getStatesAsync('*'));\n\n            if (this.config.MQTTUseServer) {\n                this.mqttServer = new MQTTServerClass(\n                    this,\n                    this.config.MQTTServerPort,\n                    this.config.MQTTUsername,\n                    this.config.MQTTPassword,\n                    utils.getAbsoluteInstanceDataDir(this),\n                );\n            }\n            this.mqttClient = new MQTTClientClass(\n                this,\n                this.config.MQTTUseServer ? '127.0.0.1' : this.config.MQTTServerIp,\n                this.config.MQTTServerPort,\n                this.config.MQTTUsername,\n                this.config.MQTTPassword,\n            );\n            this.timeout = this.setInterval(() => {\n                this.library.garbageColleting('devices.', this.config.unseenTime);\n            }, this.unseenCheckTime);\n            if (!this.config.retainGlobal) {\n                for (const id in statesObjects.rooms) {\n                    const topic = `espresense/rooms/*/${id}/set`;\n                    if (this.mqttClient) {\n                        await this.mqttClient.publish(topic, '', { retain: true });\n                    }\n                }\n            }\n        }, 1000);\n    }\n\n    async handleMessage(topic: string, message: any): Promise<void> {\n        if (!topic || message == undefined) return;\n        const topicA = topic.split('/');\n        topicA.shift();\n        const typTemp = topicA.shift();\n        if (typTemp !== 'rooms' && typTemp !== 'settings' && typTemp !== 'devices') return;\n        const typ: 'settings' | 'devices' | 'rooms' = typTemp;\n        const temp = this.library.cloneGenericObject(statesObjects[typ]._channel) as ioBroker.DeviceObject;\n\n        let device = topicA.shift();\n        device = device ? device : 'no_name';\n        if (message && message.name && message.id) {\n            this.namedDevices[message.id] = message.name;\n        }\n        temp.common.name = this.namedDevices[device] || device;\n        if (typ === 'settings' && message.name) temp.common.name = message.name;\n        if (typ === 'devices') {\n            this.deviceDB[device] = { name: this.namedDevices[device] || device, lc: Date.now() };\n            this.library.writedp('deviceDB', JSON.stringify(this.deviceDB), genericStateObjects.deviceDB);\n            if (this.config.selectedDevices.length > 0) {\n                if (\n                    this.config.selectedDevices.findIndex((i) => {\n                        return i.id === device;\n                    }) == -1\n                )\n                    return;\n            }\n        }\n        device = this.library.cleandp(device, false, true);\n        if (typ !== 'rooms' && device != '*') await this.library.writedp(`${typ}.${device}`, undefined, temp);\n\n        if (typ === 'rooms') {\n            // ignore set commands\n            let path = `${typ}.${device}`;\n            if (device == '*') {\n                path = 'global';\n                if (topicA[topicA.length - 1] == 'set') topicA.pop();\n            } else if (topicA[topicA.length - 1] == 'set') {\n                return;\n            }\n\n            const data: any = {};\n            data[topicA.join('.')] = message;\n            try {\n                data.restart = false;\n                await this.library.writeFromJson(path, typ, statesObjects, data);\n            } catch (e: any) {\n                this.log.error(e);\n                this.log.error(`Topic:${topic} data: ${JSON.stringify(data)}`);\n            }\n        } else if (typ === 'settings') {\n            const data: any = {};\n            this.namedDevices[message.id] = message.name;\n\n            data[topicA.join('.')] = message;\n            await this.library.writeFromJson(`${typ}.${device}`, typ, statesObjects, data);\n        } else if (typ === 'devices') {\n            let subDevice = topicA.shift();\n            subDevice = subDevice ? subDevice : 'no_name';\n            subDevice = this.library.cleandp(subDevice, false, true);\n            const temp = this.library.cloneGenericObject(statesObjects[typ]._channel) as ioBroker.DeviceObject;\n            temp.common.name = this.namedDevices[subDevice] || subDevice;\n            await this.library.writedp(`${typ}.${device}.${subDevice}`, undefined, temp);\n            await this.library.writedp(`${typ}.${device}.presense`, true, genericStateObjects.presense);\n            await this.library.writeFromJson(`${typ}.${device}.${subDevice}`, typ, statesObjects, message);\n        }\n    }\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            if (this.mqttClient) this.mqttClient.destroy();\n            if (this.mqttServer) this.mqttServer.destroy();\n            if (this.timeout) this.clearInterval(this.timeout);\n            if (this.startDelay) this.clearTimeout(this.startDelay);\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state && !state.ack) {\n            id = id.replace(`${this.namespace}.`, '');\n            this.library.setdb(id, 'state', state.val, undefined, state.ack, state.ts);\n            const dbEntry = this.library.readdb(id);\n            if (dbEntry && dbEntry.obj && dbEntry.obj.common && dbEntry.obj.common.write) {\n                const native = dbEntry.obj.native;\n                let val = dbEntry.val;\n                if (native && native.convert) {\n                    const fn = new Function('val', `return ${native.convert}`);\n                    val = fn(val);\n                }\n                const global = id.split('.')[1] === 'global';\n                const topic = global\n                    ? `espresense/rooms/*/${id.split('.')[2]}/set`\n                    : `espresense/${id.split('.').join('/')}/set`;\n                if (this.mqttClient) {\n                    await this.mqttClient.publish(topic, String(val), {\n                        retain: id.endsWith('.restart') ? false : !!this.config.retainGlobal,\n                    });\n                }\n            }\n        } else {\n        }\n    }\n\n    //If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     */\n    private onMessage(obj: ioBroker.Message): void {\n        if (typeof obj === 'object' && obj.message) {\n            switch (obj.command) {\n                case 'getDevices':\n                    {\n                        let result: { label: string; value: string }[] = [];\n                        for (const id in this.config.selectedDevices) {\n                            result.push({\n                                label: this.config.selectedDevices[id].name,\n                                value: this.config.selectedDevices[id].id,\n                            });\n                        }\n                        for (const id in this.deviceDB) {\n                            const data = this.deviceDB[id];\n                            if (data.lc < Date.now() - 300000) {\n                                delete this.deviceDB[id];\n                                continue;\n                            } else {\n                                if (id == '') continue;\n                                if (data.name == '') data.name = id;\n                                result.push({ label: data.name, value: id });\n                            }\n                        }\n                        result = result.filter(\n                            (a, b) =>\n                                result.findIndex((c) => {\n                                    return c.value == a.value;\n                                }) == b,\n                        );\n                        this.library.writedp('deviceDB', JSON.stringify(this.deviceDB), genericStateObjects.deviceDB);\n                        if (obj.callback) this.sendTo(obj.from, obj.command, result, obj.callback);\n                    }\n                    break;\n                case 'addDevice':\n                    {\n                        if (\n                            this.config.selectedDevices.findIndex((i) => {\n                                return i.id == obj.message.id;\n                            }) == -1\n                        ) {\n                            this.config.selectedDevices.push({\n                                id: obj.message.id,\n                                name:\n                                    (this.deviceDB[obj.message.id] && this.deviceDB[obj.message.id].name) ||\n                                    obj.message.id,\n                            });\n                        }\n                        if (obj.callback)\n                            this.sendTo(\n                                obj.from,\n                                obj.command,\n                                { native: { selectedDevices: this.config.selectedDevices } },\n                                obj.callback,\n                            );\n                    }\n                    break;\n                case 'removeDevice':\n                    {\n                        if (\n                            this.config.selectedDevices.findIndex((i) => {\n                                i.id == obj.message.id;\n                            }) != -1\n                        ) {\n                            this.config.selectedDevices.splice(\n                                this.config.selectedDevices.findIndex((i) => {\n                                    i.id == obj.message.id;\n                                }),\n                                1,\n                            );\n                        }\n                        if (obj.callback)\n                            this.sendTo(\n                                obj.from,\n                                obj.command,\n                                { native: { selectedDevices: this.config.selectedDevices } },\n                                obj.callback,\n                            );\n                    }\n                    break;\n            }\n            if (obj.command === 'send') {\n                // e.g. send email or pushover or whatever\n                this.log.info('send command');\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n            }\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Espresense(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Espresense())();\n}\n"],
  "mappings": "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",
  "names": ["val", "temp"]
}
