{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Library } from './lib/library.js';\nimport { MQTTClientClass, MQTTServerClass } from './lib/mqtt.js';\nimport { genericStateObjects, statesObjects } from './lib/definition.js';\nimport 'source-map-support/register';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nexport class Espresense extends utils.Adapter {\n    library: Library;\n    mqttClient: MQTTClientClass | undefined;\n    mqttServer: MQTTServerClass | undefined;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'espresense',\n        });\n        this.library = new Library(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator during startup\n        this.setStateAsync('info.connection', false, true);\n\n        await this.library.init();\n        await this.library.initStates(await this.getStatesAsync('*'));\n\n        this.library.writedp('devices', undefined, genericStateObjects.devices);\n        this.library.writedp('rooms', undefined, genericStateObjects.rooms);\n        this.library.writedp('settings', undefined, genericStateObjects.configs);\n\n        //check config\n        let testIt: any = this.config.MQTTServerIp;\n        if (testIt == '' || typeof testIt != 'string') {\n            this.log.warn(`Invalid configuration mqtt server ip has unexpeted value: ${testIt}`);\n            this.stop!();\n            return;\n        }\n        testIt = this.config.MQTTServerPort;\n        if (typeof testIt != 'number' || testIt <= 1023) {\n            this.log.warn(`Invalid configuration mqtt server port has unexpeted value: ${testIt}`);\n            this.stop!();\n            return;\n        }\n        testIt = this.config.MQTTPassword;\n        if (typeof testIt != 'string') {\n            this.log.error(`Invalid configuration mqtt server password has unexpeted value type ${typeof testIt}`);\n            this.stop!();\n            return;\n        }\n        testIt = this.config.MQTTUsername;\n        if (typeof testIt != 'string') {\n            this.log.error(`Invalid configuration mqtt username has unexpeted value typ: ${typeof testIt}`);\n            this.stop!();\n            return;\n        }\n\n        // configuration ok\n        if (this.config.MQTTUseServer) {\n            this.mqttServer = new MQTTServerClass(\n                this,\n                this.config.MQTTServerPort,\n                this.config.MQTTUsername,\n                this.config.MQTTPassword,\n            );\n        }\n        this.mqttClient = new MQTTClientClass(\n            this,\n            this.config.MQTTUseServer ? '127.0.0.1' : this.config.MQTTServerIp,\n            this.config.MQTTServerPort,\n            this.config.MQTTUsername,\n            this.config.MQTTPassword,\n            this.handleMessage,\n        );\n    }\n\n    async handleMessage(topic: string, message: any): Promise<void> {\n        if (!topic || message == undefined) return;\n        const topicA = topic.split('/');\n        topicA.shift();\n        const typ = topicA.shift();\n        if (typ !== 'rooms' && typ !== 'settings' && typ !== 'devices') return;\n        const temp = this.library.cloneGenericObject(statesObjects[typ]._channel) as ioBroker.DeviceObject;\n\n        let name = topicA.shift();\n        name = name ? name : 'no_name';\n        temp.common.name = name;\n\n        await this.library.writedp(`${typ}.${name}`, undefined, temp);\n\n        if (typ === 'rooms') {\n            const data: any = {};\n            data[topicA.join('.')] = message;\n            await this.library.writeFromJson(`${typ}.${name}`, typ, statesObjects, data);\n        } else if (typ === 'settings') {\n            const data: any = {};\n            data[topicA.join('.')] = message;\n            await this.library.writeFromJson(`${typ}.${name}`, typ, statesObjects, data);\n            if (typ === 'settings') this.log.debug(JSON.stringify(data));\n        } else if (typ === 'devices') {\n            let subName = topicA.shift();\n            subName = subName ? subName : 'no_name';\n            const temp = this.library.cloneGenericObject(statesObjects[typ]._channel) as ioBroker.DeviceObject;\n            temp.common.name = subName;\n            await this.library.writedp(`${typ}.${name}.${subName}`, undefined, temp);\n            await this.library.writeFromJson(`${typ}.${name}.${subName}`, typ, statesObjects, message);\n        }\n    }\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            if (this.mqttClient) this.mqttClient.destroy();\n            if (this.mqttServer) this.mqttServer.destroy();\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Espresense(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Espresense())();\n}\n"],
  "mappings": "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",
  "names": ["temp"]
}
