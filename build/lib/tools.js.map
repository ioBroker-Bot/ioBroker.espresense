{
  "version": 3,
  "sources": ["../../src/lib/tools.ts"],
  "sourcesContent": ["type Point = [number, number, number];\n\n/**\n * Trilaterates the position based on four points and their distances.\n *\n * @param p1 - The first point.\n * @param d1 - The distance to the first point.\n * @param p2 - The second point.\n * @param d2 - The distance to the second point.\n * @param p3 - The third point.\n * @param d3 - The distance to the third point.\n * @param p4 - The fourth point.\n * @param d4 - The distance to the fourth point.\n * @returns The trilaterated point or null if no real solution exists.\n */\nexport function trilaterate4(\n    p1: Point,\n    d1: number,\n    p2: Point,\n    d2: number,\n    p3: Point,\n    d3: number,\n    p4: Point,\n    d4: number,\n): Point | null {\n    const ex = normalize(subtract(p2, p1));\n    const i = dot(ex, subtract(p3, p1));\n    const ey = normalize(subtract(subtract(p3, p1), scale(ex, i)));\n    const ez = cross(ex, ey);\n\n    const d = distance(p1, p2);\n    const j = dot(ey, subtract(p3, p1));\n\n    const x = (d1 ** 2 - d2 ** 2 + d ** 2) / (2 * d);\n    const y = (d1 ** 2 - d3 ** 2 + i ** 2 + j ** 2) / (2 * j) - (i / j) * x;\n    const zSquared = d1 ** 2 - x ** 2 - y ** 2;\n\n    if (zSquared < -16) {\n        // Allow a small tolerance for floating-point errors\n        return null;\n    }\n\n    const z = Math.sqrt(Math.max(zSquared, 0)); // Ensure non-negative value for sqrt\n    const pA = add(p1, add(scale(ex, x), add(scale(ey, y), scale(ez, z))));\n    const pB = add(p1, add(scale(ex, x), add(scale(ey, y), scale(ez, -z))));\n\n    return chooseCorrectPoint(pA, pB, p4, d4);\n}\n\n/**\n * Chooses the point that best matches the distance to the fourth point.\n *\n * @param pA - The first candidate point.\n * @param pB - The second candidate point.\n * @param p4 - The fourth point.\n * @param d4 - The distance to the fourth point.\n * @returns The point that best matches the distance to the fourth point.\n */\nfunction chooseCorrectPoint(pA: Point, pB: Point, p4: Point, d4: number): Point {\n    const dA = distance(pA, p4);\n    const dB = distance(pB, p4);\n    return Math.abs(dA - d4) < Math.abs(dB - d4) ? pA : pB;\n}\n\n/**\n * Subtracts point b from point a.\n *\n * @param a - The first point.\n * @param b - The second point.\n * @returns The resulting point after subtraction.\n */\nfunction subtract(a: Point, b: Point): Point {\n    return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n}\n\n/**\n * Adds point a and point b.\n *\n * @param a - The first point.\n * @param b - The second point.\n * @returns The resulting point after addition.\n */\nfunction add(a: Point, b: Point): Point {\n    return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n}\n\n/**\n * Scales point v by scalar s.\n *\n * @param v - The point to scale.\n * @param s - The scalar value.\n * @returns The resulting point after scaling.\n */\nfunction scale(v: Point, s: number): Point {\n    return [v[0] * s, v[1] * s, v[2] * s];\n}\n\n/**\n * Computes the dot product of points a and b.\n *\n * @param a - The first point.\n * @param b - The second point.\n * @returns The dot product of the two points.\n */\nfunction dot(a: Point, b: Point): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of points a and b.\n *\n * @param a - The first point.\n * @param b - The second point.\n * @returns The cross product of the two points.\n */\nfunction cross(a: Point, b: Point): Point {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n/**\n * Computes the distance between points a and b.\n *\n * @param a - The first point.\n * @param b - The second point.\n * @returns The distance between the two points.\n */\nfunction distance(a: Point, b: Point): number {\n    return Math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2 + (a[2] - b[2]) ** 2);\n}\n\n/**\n * Normalizes point v to a unit vector.\n *\n * @param v - The point to normalize.\n * @returns The normalized point.\n */\nfunction normalize(v: Point): Point {\n    const mag = Math.sqrt(v[0] ** 2 + v[1] ** 2 + v[2] ** 2);\n    return [v[0] / mag, v[1] / mag, v[2] / mag];\n}\n\n// Example\nconst p1: Point = [0, 0, 0],\n    d1 = 5;\nconst p2: Point = [10, 0, 0],\n    d2 = 5;\nconst p3: Point = [5, 5, 0],\n    d3 = 5;\nconst p4: Point = [5, 2, 5],\n    d4 = 5;\n\nconsole.log(trilaterate4(p1, d1, p2, d2, p3, d3, p4, d4));\n"],
  "mappings": "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",
  "names": ["p1", "d1", "p2", "d2", "p3", "d3", "p4", "d4"]
}
