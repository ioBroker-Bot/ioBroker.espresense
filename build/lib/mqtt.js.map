{
  "version": 3,
  "sources": ["../../src/lib/mqtt.ts"],
  "sourcesContent": ["import type { IClientPublishOptions } from 'mqtt';\n// eslint-disable-next-line\nimport mqtt from 'mqtt'; // import namespace \"mqtt\"\nimport { Level } from 'level';\n\n//@ts-expect-error no types\nimport aedesPersistencelevel from 'aedes-persistence-level';\n\nimport type { AdapterClassDefinition } from './library';\n// eslint-disable-next-line\n    import { BaseClass } from './library';\n\nimport type { Client } from 'aedes';\n// eslint-disable-next-line\nimport Aedes from 'aedes';\nimport type { Server } from 'net';\n// eslint-disable-next-line\nimport { createServer } from 'net';\nimport type { Espresense } from '../main';\n\nexport class MQTTClientClass extends BaseClass {\n    client: mqtt.MqttClient;\n    data: any = {};\n    constructor(adapter: AdapterClassDefinition, ip: string, port: number, username: string, password: string) {\n        super(adapter, 'mqttClient');\n        this.client = mqtt.connect(`mqtt://${ip}:${port}`, {\n            username: username,\n            password: password,\n            clientId: `${this.adapter.host}_${this.adapter.namespace}`,\n        });\n        this.client.on('connect', () => {\n            this.log.info(`Connection is active.`);\n            this.adapter.setState('info.connection', true, true).catch(() => {});\n            this.client.subscribe('espresense/#', err => {\n                if (err) {\n                    this.log.error(`On subscribe: ${err}`);\n                } else {\n                    this.log.info('Subscripe to topic espresense/#');\n                }\n            });\n        });\n        this.client.on('disconnect', () => {\n            this.adapter.setState('info.connection', false, true).catch(() => {});\n            this.log.debug(`disconnected`);\n        });\n        this.client.on('error', err => {\n            this.log.error(`${err as unknown as string}`);\n        });\n\n        this.client.on('close', () => {\n            this.adapter.setState('info.connection', false, true).catch(() => {});\n            this.log.info(`Connection is closed.`);\n        });\n\n        this.client.on('message', (topic, message) => {\n            let value: any;\n            let type = '';\n            try {\n                value = JSON.parse(message.toString());\n                if (typeof value == 'string') {\n                    throw new Error('nope');\n                }\n                type = typeof value;\n            } catch {\n                value = message.toString();\n                if (isNaN(value)) {\n                    if (value == 'ON' || value == 'OFF') {\n                        type = 'boolean';\n                        value = value == 'ON';\n                    } else {\n                        type = 'string';\n                    }\n                } else if (value == '') {\n                    type = 'string';\n                } else {\n                    // eslint-disable-next-line\n                    type = 'number';\n                    value = parseFloat(value);\n                }\n            }\n            //this.log.debug(`${topic}: ${type} - ${typeof value == 'object' ? JSON.stringify(value) : value}`);\n            this.adapter.handleMessage(topic, value).catch(() => {});\n        });\n    }\n    async publish(topic: string, message: string, opt: IClientPublishOptions): Promise<void> {\n        this.log.debug(`Publishing topic: ${topic} with message: ${message}.`);\n        await this.client.publishAsync(topic, message, opt);\n    }\n\n    destroy(): void {\n        this.client.end();\n    }\n}\n\nexport class MQTTServerClass extends BaseClass {\n    aedes: Aedes;\n    server: Server;\n    constructor(adapter: Espresense, port: number, username: string, password: string, path: string) {\n        super(adapter, 'mqttServer');\n        const persistence = aedesPersistencelevel(new Level(path));\n        this.aedes = new Aedes({ persistence: persistence });\n        this.server = createServer(this.aedes.handle);\n\n        this.server.listen(port, () => {\n            this.log.info(`Started and listening on port ${port}`);\n        });\n        this.aedes.authenticate = (\n            client: Client,\n            un: Readonly<string | undefined>,\n            pw: Readonly<Buffer | undefined>,\n            callback: any,\n        ) => {\n            const confirm = username === un && password == pw!.toString();\n            if (!confirm) {\n                this.log.warn(`Login denied client: ${client.id}. User name or password wrong!`);\n            } else {\n                this.log.info(`Client ${client.id} login successful.`);\n            }\n            callback(null, confirm);\n        };\n    }\n    destroy(): void {\n        this.aedes.close();\n        this.server.close();\n    }\n}\n"],
  "mappings": "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",
  "names": ["mqtt", "aedesPersistencelevel", "Aedes"]
}
